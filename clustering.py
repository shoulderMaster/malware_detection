#/usr/bin/python3
import subprocess
import os
import pandas as pd
import matplotlib.pyplot as plt
from functools import reduce
import pefile


class config :
    def __init__(self) :
        self.malware_dir = "./all/"
        self.malware_filename_list = os.listdir(self.malware_dir)
        self.malware_filename_list.sort()
        self.malware_filepath_list = [self.malware_dir+flnm for flnm in self.malware_filename_list]
        self.malware_filepath_list.sort()
        self.graph_result_path = "./graph/"
        if not os.path.exists(self.graph_result_path) :
            os.mkdir(self.graph_result_path)

class vector :

    def __init__(self, target_file) :
        self.target_file = target_file
        self.name = target_file.split("/")[-1]

    def get_similarity(self, vector) :
        A = self.feature_set
        B = vector.feature_set
        if len(A.union(B)) != 0 :
            return len(A.intersection(B))/len(B)
        else :
            return -1


class StringVectorConfig () :
    base_count = 0
    string_set = None

    @classmethod
    def init_string_list (cls) :
        if cls.string_set == None :
            cls.string_set = set()
            with open("./string_distict_result.txt") as f :
                string_list = f.readlines()
                string_dict = dict()
                for string in string_list :
                    string_dict[string] = 0

                for string in string_list :
                    string_dict[string] += 1
                sorted_list = sorted(string_dict.items(), key=lambda kv: kv[1])
                for key in [item[0] for item in sorted_list] :
                    if string_dict[key] >= cls.base_count :
                        cls.string_set.add(key.replace("\n", ""))

class StringVector(StringVectorConfig, vector) :
    def __init__(self, target_file) :
        super(StringVector, self).__init__(target_file)
        self.init_string_list()
        printable_strings = set(subprocess.check_output(("strings", target_file)).decode("utf8").split("\n"))
        self.feature_set = set([i for i in printable_strings if i in self.string_set])


def print_progress_bar(index_list, len_list, bar_size, description) :
    if len(index_list) == 1 and len(len_list) == 1 :
        divided = index_list[0] + 1
        divider = len_list[0]
    else :
        mul_vector = [reduce(lambda x, y : x*y, len_list[i:]) if i in range(1,len(len_list)) else 1 for i in range(1, len(len_list) + 1)]
        divided = reduce(lambda x, y : x + y[0]*y[1] if type(x) == int else x[0]*x[1] + y[0]*y[1], zip(index_list, mul_vector)) +1
        divider = reduce(lambda x, y : x*y, len_list)
    t = divided/divider
    print("\r%s [%s%s] %.2f %%" % (description, "#"*int(t*bar_size), "-"*(bar_size-int(t*bar_size)), t*100), end="")
    if t*100 == 100 :
        print()

class ApiVectorConfig() :
    api_base_count = 0
    dll_base_count = 0
    api_set = set()
    dll_set = set()


    @classmethod
    def init_api_set(cls, cfg, which="") :
        if not (cls.api_set and cls.dll_set) :
            api_dict = dict()
            dll_dict = dict()
            for i, malware in enumerate(cfg.malware_filepath_list) :
                pe = pefile.PE(malware)
                for j, entry in enumerate(pe.DIRECTORY_ENTRY_IMPORT) :
                    print_progress_bar([i, j], [len(cfg.malware_filepath_list), len(pe.DIRECTORY_ENTRY_IMPORT)], 20, "initializing api_dict on progress")
                    dll = entry.dll.decode("utf8")
                    if dll in dll_dict.keys() :
                        dll_dict[dll] += 1
                    else :
                        dll_dict[dll] = 1
                    for imp in entry.imports :
                        if not imp.name == None :
                            api = imp.name.decode("utf8")
                            if api in api_dict.keys() :
                                api_dict[api] += 1
                            else :
                                api_dict[api] = 1

            sorted_api = sorted(api_dict.items(), key=lambda kv: kv[1])
            sorted_dll = sorted(dll_dict.items(), key=lambda kv: kv[1])
            for key in [item[0] for item in sorted_api] :
                if api_dict[key] >= cls.api_base_count :
                    cls.api_set.add(key)
            for key in [item[0] for item in sorted_dll] :
                if dll_dict[key] >= cls.dll_base_count :
                    cls.dll_set.add(key)

class ApiVector(ApiVectorConfig, vector) :
    def __init__(self, target_file, cfg) :
        super(ApiVector, self).__init__(target_file)
        self.init_api_set(cfg)
        imported_api_list = self.get_api_list()
        self.feature_set = set([i for i in imported_api_list if i in self.api_set])

    def get_api_list(self) :
        api_list = list()
        pe = pefile.PE(self.target_file)
        for entry in pe.DIRECTORY_ENTRY_IMPORT :
            for imp in entry.imports :
                if not imp.name == None :
                    api_list.append(imp.name.decode("utf8"))
        return api_list

class DllVector(ApiVectorConfig, vector) :
    def __init__(self, target_file, cfg) :
        super(DllVector, self).__init__(target_file)
        self.init_api_set(cfg)
        imported_dll = self.get_dll_list()
        self.feature_set = set([i for i in imported_dll if i in self.dll_set])

    def get_dll_list(self) :
        dll_list = list()
        pe = pefile.PE(self.target_file)
        for entry in pe.DIRECTORY_ENTRY_IMPORT :
            dll_name = entry.dll.decode("utf8")
            dll_list.append(dll_name)
        return dll_list

def string_main() :
    cfg = config()
    malwareFeatures = list()
    for idx, malware in enumerate(cfg.malware_filepath_list) :
        print_progress_bar([idx], [len(cfg.malware_filepath_list)], 20, "initializing vectors on progress...")
        malwareFeatures.append(StringVector(malware))
    malwareVectorMap = [[0 for i in malwareFeatures] for j in malwareFeatures]
    for row, r_vec in enumerate(malwareFeatures) :
        for col, c_vec in enumerate(malwareFeatures) :
            print_progress_bar([row, col], [len(malwareFeatures), len(malwareFeatures)], 20, "generating similarity vector on progress...")
            malwareVectorMap[row][col] = r_vec.get_similarity(c_vec)

    for idx, (feature, vec) in enumerate(zip(malwareFeatures, malwareVectorMap)) :
        print_progress_bar([idx], [len(malwareFeatures)], 20, "generating graph image on progress...")
        df = pd.DataFrame(vec)
        ax = df.plot()
        fig = ax.get_figure()
        fig.savefig(cfg.graph_result_path+feature.name+".png")
        plt.close(fig)
        #plt.show()

def api_main() :
    cfg = config()
    malwareFeatures = list()
    for idx, malware in enumerate(cfg.malware_filepath_list) :
        print_progress_bar([idx], [len(cfg.malware_filepath_list)], 20, "initializing vectors on progress...")
        malwareFeatures.append(ApiVector(malware, cfg))

    malwareVectorMap = [[0 for i in malwareFeatures] for j in malwareFeatures]
    for row, r_vec in enumerate(malwareFeatures) :
        for col, c_vec in enumerate(malwareFeatures) :
            print_progress_bar([row, col], [len(malwareFeatures), len(malwareFeatures)], 20, "generating similarity vector on progress...")
            malwareVectorMap[row][col] = r_vec.get_similarity(c_vec)

    for idx, (feature, vec) in enumerate(zip(malwareFeatures, malwareVectorMap)) :
        print_progress_bar([idx], [len(malwareFeatures)], 20, "generating graph image on progress...")
        df = pd.DataFrame(vec)
        ax = df.plot()
        fig = ax.get_figure()
        fig.savefig(cfg.graph_result_path+feature.name+".png")
        plt.close(fig)
        #plt.show()

def dll_main() :
    cfg = config()
    malwareFeatures = list()
    for idx, malware in enumerate(cfg.malware_filepath_list) :
        print_progress_bar([idx], [len(cfg.malware_filepath_list)], 20, "initializing vectors on progress...")
        malwareFeatures.append(DllVector(malware, cfg))

    malwareVectorMap = [[0 for i in malwareFeatures] for j in malwareFeatures]
    for row, r_vec in enumerate(malwareFeatures) :
        for col, c_vec in enumerate(malwareFeatures) :
            print_progress_bar([row, col], [len(malwareFeatures), len(malwareFeatures)], 20, "generating similarity vector on progress...")
            malwareVectorMap[row][col] = r_vec.get_similarity(c_vec)

    for idx, (feature, vec) in enumerate(zip(malwareFeatures, malwareVectorMap)) :
        print_progress_bar([idx], [len(malwareFeatures)], 20, "generating graph image on progress...")
        df = pd.DataFrame(vec)
        ax = df.plot()
        fig = ax.get_figure()
        fig.savefig(cfg.graph_result_path+feature.name+".png")
        plt.close(fig)
        #plt.show()


#string_main()
#api_main()
dll_main()
