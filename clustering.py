#/usr/bin/python3
import subprocess
import os
import pandas as pd
import matplotlib.pyplot as plt
from functools import reduce


class config :
    def __init__(self) :
        self.malware_dir = "./all/"
        self.malware_filename_list = os.listdir(self.malware_dir)
        self.malware_filepath_list = [self.malware_dir+flnm for flnm in self.malware_filename_list]
        self.graph_result_path = "./graph/"
        if not os.path.exists(self.graph_result_path) :
            os.mkdir(self.graph_result_path)


class StringVectorConfig () :
    base_count = 0
    string_set = None

    @classmethod
    def init_string_list (cls) :
        if cls.string_set == None :
            cls.string_set = set()
            with open("./string_distict_result.txt") as f :
                string_list = f.readlines()
                string_dict = dict()
                for string in string_list :
                    string_dict[string] = 0

                for string in string_list :
                    string_dict[string] += 1
                sorted_list = sorted(string_dict.items(), key=lambda kv: kv[1])
                for key in [item[0] for item in sorted_list] :
                    if string_dict[key] >= cls.base_count :
                        cls.string_set.add(key.replace("\n", ""))

class StringVector(StringVectorConfig) :
    def __init__(self, target_file) :
        self.init_string_list()
        self.name = target_file.split("/")[-1]
        printable_strings = set(subprocess.check_output(("strings", target_file)).decode("utf8").split("\n"))
        self.printable_strings_set = set([i for i in printable_strings if i in self.string_set])

    def get_similarity(self, vector) :
        A = self.printable_strings_set
        B = vector.printable_strings_set
        if len(A.union(B)) != 0 :
            return len(A.intersection(B))/len(B)
        else :
            return -1
 
def print_progress_bar(index_list, len_list, bar_size, description) :
    if len(index_list) == 1 and len(len_list) == 1 :
        divided = index_list[0] + 1
        divider = len_list[0]
    else :
        mul_vector = [reduce(lambda x, y : x*y, len_list[i:]) if i in range(1,len(len_list)) else 1 for i in range(1, len(len_list) + 1)]
        divided = reduce(lambda x, y : x + y[0]*y[1] if type(x) == int else x[0]*x[1] + y[0]*y[1], zip(index_list, mul_vector)) +1
        divider = reduce(lambda x, y : x*y, len_list)
    t = divided/divider
    print("\r%s [%s%s] %.2f %%" % (description, "#"*int(t*bar_size), "-"*(bar_size-int(t*bar_size)), t*100), end="")
    if t*100 == 100 :
        print()

def test_main() :
    cfg = config()
    malwareFeatures = list()
    for idx, malware in enumerate(cfg.malware_filepath_list) :
        print_progress_bar([idx], [len(cfg.malware_filepath_list)], 20, "initializing vectors on progress...") 
        malwareFeatures.append(StringVector(malware))
    malwareVectorMap = [[0 for i in malwareFeatures] for j in malwareFeatures]
    for row, r_vec in enumerate(malwareFeatures) :
        for col, c_vec in enumerate(malwareFeatures) :
            print_progress_bar([row, col], [len(malwareFeatures), len(malwareFeatures)], 20, "generating similarity vector on progress...")
            malwareVectorMap[row][col] = r_vec.get_similarity(c_vec)

    for idx, (feature, vec) in enumerate(zip(malwareFeatures, malwareVectorMap)) :
        print_progress_bar([idx], [len(malwareFeatures)], 20, "generating graph image on progress...")
        df = pd.DataFrame(vec)
        ax = df.plot()
        fig = ax.get_figure()
        fig.savefig(cfg.graph_result_path+feature.name+".png")
        plt.close(fig)
        #plt.show()



test_main()
