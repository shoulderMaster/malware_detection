from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.cluster import KMeans
import pandas as pd
from matplotlib import pyplot as plt
import matplotlib
import functools

feature_list = ["string", "api", "dll"]
class_list = ["malware", "benign"]
csv_path = "../result/csv/similarity_vectors_%s_%s_%s.csv"

def get_df() :
    file_list = []
    for class_name in class_list :
        filepath_list = []
        for feature_name in feature_list :
            filepath_list.append(csv_path % (class_name, "train", feature_name))
        file_list.append(filepath_list)
    print(file_list)
    print(file_list[0])
    print(file_list[1])

    malware_df = load_df(file_list[0])
    benign_df = load_df(file_list[1])
    return malware_df, benign_df

def load_csv(file_name) :
    column_prefix = file_name.split("_")[-1].split(".")[0] + "_%d"
    print(file_name, "debug")
    df = pd.read_csv(file_name).set_index("file_name")
    df.columns = [column_prefix % i for i in range(len(df.columns))]
    return df

def load_df(file_list) :
    return simple_merge_df([load_csv(target_name) for target_name in file_list])


def simple_merge_df(df_list) :
    merged_df = functools.reduce(lambda x, y : x.join(y), df_list)
    return merged_df


def main() :
    matplotlib.rc("font", family="Consolas")
    malware_df, benign_df = get_df()
    benign_df.index = ["benign____________________%-5d" % i for i in range(len(benign_df.index))]
    similarity_vector_list = pd.concat([malware_df, benign_df])
    normalized_data = similarity_vector_list#/(similarity_vector_list.std()+0.0001)
    normalized_data = malware_df
    print(normalized_data.values)
   #method_list = ['average', 'single', 'complete', 'centroid', 'weighted', "ward"]
   #for method in method_list :
   #    z = linkage(normalized_data.values, method=method, optimal_ordering=True)
   #    fig = plt.figure(figsize=(200, 20))
   #    for row in z :
   #        for col in row :
   #            print("%-4.1f" % col, end=" ")
   #        print("")
   #    dn = dendrogram(z, labels=normalized_data.index.values)
   #    fig.savefig("../result/clustering/dendrogram/%s.png" % method)

    model = KMeans(init="k-means++", n_clusters=24, algorithm="auto")
    model.fit(normalized_data)
    predict = model.predict(normalized_data)
    for file_name, cluster in sorted(zip(normalized_data.index.values, predict), key=(lambda e : e[1])) :
        print(file_name, cluster)

   #inertias = []
   #ks = range(1, 30)
   #for k in ks :
   #    print(k/30)
   #    model = KMeans(init="k-means++", n_clusters=k, algorithm="auto")
   #    model.fit(normalized_data)
   #    inertias.append(model.inertia_)
   #fig = plt.figure(figsize=(200,20))
   #plt.plot(ks, inertias)
   #fig.savefig("../result/clustering/inerias_graph.png")





main()
