

class CheckPointConfiguration :
    def __init__(self, LSTM=None, DNN=None) :

        if DNN == True :
            self.pathOfCheckpoint = "./model_export/190518_01"
            self.filenameOfCheckpoint = "/model_data"
            self.save_step= 300


class InputDataConfiguration :
    def __init__(self, LSTM=None, DNN=None) :

        if DNN == True :
            self.pathOfinputData = "./DNN_input_data.csv"
            self.num_input = 612*3
            self.num_label = 2
            self.train_ratio = 0.3
            #self.labelList = ["Active Power (W)", "Derated Power (W)", "Generator Speed (RPM)"]
            self.labelList = ["label_malware", "label_benign"]

class LearningConfiguration :
    def __init__(self, LSTM=None, DNN=None) :

        if LSTM == True :
            self.resultPath = "result_LSTM.csv"
            self.batchDivider = 8
            self.learning_rate = 0.05
            self.dropoutRate = 0.0
            self.output_keep_prob = 1 - self.dropoutRate
            self.input_keep_prob = 1 - self.dropoutRate
            self.rnnHiddenDim = 64
            self.rnnMultiCellNum = 4
            self.numLearningEpoch = 1020
            self.display_step = 30

        if DNN == True :
            self.resultPath = "result_malware_detection.csv"
            self.batchDivider = 3
            self.learning_rate = 0.0001
            self.dropoutRate = 0.3
            self.input_keep_prob = 1 - self.dropoutRate
            self.numLearningEpoch = 3000+1
            self.display_step = 60
            self.n_hidden_1 = self.n_hidden_2 = self.n_hidden_3 = 64
            self.hiddenLayer = 3
            self.n_hidden = 512


class Configuration :
    def __init__(self, LSTM=None, DNN=None) :

        if DNN == True :
            self.learning = LearningConfiguration(DNN=True)
            self.inputData = InputDataConfiguration(DNN=True)
            self.checkPoint = CheckPointConfiguration(DNN=True)
