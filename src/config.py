
model_type = "DNN"
model_type = "support_vector_machine"
model_type = "linear_neural_network"
train_ratio_option = 50
train_ratio_option = 30
train_ratio_option = 70
learning_tag = "single_perceptron_%d_%s" % (train_ratio_option, model_type)

class CheckPointConfiguration :
    def __init__(self, model) :

        global learning_tag
        self.pathOfCheckpoint = "./model_export/%s/" % learning_tag
        self.filenameOfCheckpoint = "/model_data"
        self.save_step= 300


class InputDataConfiguration :
    def __init__(self, model) :

        global train_ratio_option
        self.pathOfTrainSet= "./learning_data_backup/%d/train_data.csv" % train_ratio_option
        self.pathOfTestSet= "./learning_data_backup/%d/test_data.csv" % train_ratio_option
        self.num_input = 1277*3
        self.num_label = 2
        if model == "support_vector_machine" :
            self.num_label = 1
        self.train_ratio = 0.3 #unused
        self.labelList = ["label_malware", "label_benign"]

class LearningConfiguration :
    def __init__(self, model) :

        if "recurrence" in model :
            self.resultPath = "result_LSTM.csv"
            self.batchDivider = 8
            self.learning_rate = 0.05
            self.dropoutRate = 0.0
            self.output_keep_prob = 1 - self.dropoutRate
            self.input_keep_prob = 1 - self.dropoutRate
            self.rnnHiddenDim = 64
            self.rnnMultiCellNum = 4
            self.numLearningEpoch = 1020
            self.display_step = 30
        else :
            self.resultPath = "../result/result_malware_detection_03.csv"
            self.batchDivider = 2
            self.learning_rate = 0.0001
            self.dropoutRate = 0.1
            self.input_keep_prob = 1 - self.dropoutRate
            self.numLearningEpoch = 20000+1
            self.display_step = 60
            self.n_hidden_1 = self.n_hidden_2 = self.n_hidden_3 = 512
            self.hiddenLayer = 3
            self.n_hidden = 16


class Configuration :
    def __init__(self, model) :
        self.learning = LearningConfiguration(model=model)
        self.inputData = InputDataConfiguration(model=model)
        self.checkPoint = CheckPointConfiguration(model=model)
