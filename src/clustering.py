#/usr/bin/python3
import subprocess
import os
import pandas as pd
import matplotlib.pyplot as plt
from functools import reduce
import pefile
import json

class NonExistFeatureException(Exception) :
    pass

class TargetConfig :
    def __init__(self, feature_name, target_dir="../malware/", label="malware") :
        self.feature_name = feature_name
        self.target_dir = target_dir
        self.label = label
        self.target_filename_list = os.listdir(self.target_dir)
        self.target_filename_list.sort()
        self.target_filepath_list = [target_dir+file_nm for file_nm in self.target_filename_list]

        #for similarity vector
        self.graph_result_path = "../result/graph/%s_%s_graph/" % (label, feature_name)
        self.csv_result_path = "../result/csv/"
        check_dir(self.graph_result_path)
        check_dir(self.csv_result_path)
        self.csv_result_path += "%s_%s.csv" % (label, feature_name)

class Vector :

    def __init__(self, target_file) :
        self.target_file = target_file
        self.name = target_file.split("/")[-1]

    def _print_current_target(self) :
        print("   %-79s" % self.target_file, end="")

    def get_similarity(self, vector) :
        A = self.feature_set
        B = vector.feature_set
        if len(A.union(B)) != 0 :
            return len(A.intersection(B))/len(B)
        else :
            return 0

class VectorConfig () :
    base_count = 0
    all_feature_set = None
    feature_config = None

    @classmethod
    def init_string_set (cls) :
        if cls.all_feature_set == None :
            cls.feature_config = TargetConfig("string")
            cls.all_feature_set = set()

            if not os.path.exists("../resource/string_distict_result.txt") :
                check_dir("../resource/")
                subprocess.call("./make_string_distict_set.sh")

            with open("../resource/string_distict_result.txt") as f :
                string_list = f.readlines()

                string_dict = dict()
                for string in string_list :
                    string_dict[string] = 0

                for idx, string in enumerate(string_list) :
                    print_progress_bar([idx], [len(string_list)], 20, "initializing feature set on progress... %s_%s" % (cls.feature_config.label, cls.feature_config.feature_name))
                    string_dict[string] += 1
                sorted_list = sorted(string_dict.items(), key=lambda kv: kv[1])
                for key in [item[0] for item in sorted_list] :
                    if string_dict[key] >= cls.base_count :
                        cls.all_feature_set.add(key.replace("\n", ""))

    @classmethod
    def init_api_set(cls) :
        if cls.all_feature_set == None :
            cls.feature_config = TargetConfig("api")
            cls.all_feature_set = set()
            api_dict = dict()
            for i, malware in enumerate(cls.feature_config.target_filepath_list) :
                try :
                    pe = pefile.PE(malware)
                except pefile.PEFormatError :
                    print("\nis %s PE file?" % malware)
                    continue
                    exit(-1)

                if pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress != 0:
                    for j, entry in enumerate(pe.DIRECTORY_ENTRY_IMPORT) :
                        print_progress_bar([i, j], [len(cls.feature_config.target_filepath_list), len(pe.DIRECTORY_ENTRY_IMPORT)], 20, "initializing feature set on progress... %s_%s" % (cls.feature_config.label, cls.feature_config.feature_name))
                        for imp in entry.imports :
                            if not imp.name == None :
                                api = imp.name.decode("utf8")
                                if api in api_dict.keys() :
                                    api_dict[api] += 1
                                else :
                                    api_dict[api] = 1

            sorted_api = sorted(api_dict.items(), key=lambda kv: kv[1])
            for key in [item[0] for item in sorted_api] :
                if api_dict[key] >= cls.base_count :
                    cls.all_feature_set.add(key)

    @classmethod
    def init_dll_set(cls) :
        if cls.all_feature_set == None :
            cls.feature_config = TargetConfig("dll")
            cls.all_feature_set = set()
            dll_dict = dict()
            for i, malware in enumerate(cls.feature_config.target_filepath_list) :
                try :
                    pe = pefile.PE(malware)
                except pefile.PEFormatError :
                    print("\nis %s PE file?" % malware)
                    exit(-1)
                if pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress != 0:
                    for j, entry in enumerate(pe.DIRECTORY_ENTRY_IMPORT) :
                        print_progress_bar([i, j], [len(cls.feature_config.target_filepath_list), len(pe.DIRECTORY_ENTRY_IMPORT)], 20, "initializing feature set on progress... %s_%s" % (cls.feature_config.label, cls.feature_config.feature_name))
                        dll = entry.dll.decode("utf8")
                        if dll in dll_dict.keys() :
                            dll_dict[dll] += 1
                        else :
                            dll_dict[dll] = 1

            sorted_dll = sorted(dll_dict.items(), key=lambda kv: kv[1])
            for key in [item[0] for item in sorted_dll] :
                if dll_dict[key] >= cls.base_count :
                    cls.all_feature_set.add(key)


class StringVectorConfig(VectorConfig) :
    base_count = 0

class ApiVectorConfig(VectorConfig) :
    base_count = 0

class DllVectorConfig(VectorConfig) :
    base_count = 0

class StringVector(StringVectorConfig, Vector) :
    def __init__(self, target_file) :
        super(StringVector, self).__init__(target_file)
        self.init_string_set()
        printable_strings = self.get_printable_strings()
        self.feature_set = set([i for i in printable_strings if i in self.all_feature_set])

    def get_printable_strings(self) :
        self._print_current_target()
        return set(subprocess.check_output(("strings", self.target_file)).decode("utf8").split("\n"))

class ApiVector(ApiVectorConfig, Vector) :
    def __init__(self, target_file) :
        super(ApiVector, self).__init__(target_file)
        self.init_api_set()
        imported_api_list = self.get_api_list()
        self.feature_set = set([i for i in imported_api_list if i in self.all_feature_set])

    def get_api_list(self) :
        api_list = list()
        try :
            pe = pefile.PE(self.target_file)
        except pefile.PEFormatError :
            print("\nis %s PE file?" % self.target_file)
            exit(-1)
        self._print_current_target()
        if pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress != 0:
            for entry in pe.DIRECTORY_ENTRY_IMPORT :
                for imp in entry.imports :
                    if not imp.name == None :
                        api_list.append(imp.name.decode("utf8"))
        return api_list

class DllVector(DllVectorConfig, Vector) :
    def __init__(self, target_file) :
        super(DllVector, self).__init__(target_file)
        self.init_dll_set()
        imported_dll = self.get_dll_list()
        self.feature_set = set([i for i in imported_dll if i in self.all_feature_set])

    def get_dll_list(self) :
        dll_list = list()
        try :
            pe = pefile.PE(self.target_file)
        except pefile.PEFormatError :
            print("\nis %s PE file?" % self.target_file)
            exit(-1)
        self._print_current_target()
        if pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress != 0:
            for entry in pe.DIRECTORY_ENTRY_IMPORT :
                dll_name = entry.dll.decode("utf8")
                dll_list.append(dll_name)
        return dll_list


def print_progress_bar(index_list, len_list, bar_size, description) :
    if len(index_list) == 1 and len(len_list) == 1 :
        divided = index_list[0] + 1
        divider = len_list[0]
    else :
        mul_vector = [reduce(lambda x, y : x*y, len_list[i:]) if i in range(1,len(len_list)) else 1 for i in range(1, len(len_list) + 1)]
        divided = reduce(lambda x, y : x + y[0]*y[1] if type(x) == int else x[0]*x[1] + y[0]*y[1], zip(index_list, mul_vector)) +1
        divider = reduce(lambda x, y : x*y, len_list)
    t = divided/divider
    print("\r%s [%s%s] %.2f %%" % (description, "#"*int(t*bar_size), "-"*(bar_size-int(t*bar_size)), t*100), end="")
    if t*100 == 100 :
        print()

def check_dir(target_path) :
    if target_path[-1] == "/" :
        target_path = target_path[:-1]
    dir_list = target_path.split("/")
    path_to_make = dir_list[0] + "/"
    for comp in dir_list[1:] :
        path_to_make += "%s/" % comp
        if not os.path.exists(path_to_make) :
            os.mkdir(path_to_make)

class FeatureExtraction () :

    def __init__(self, cfg) :
        self.config = cfg
        self.init_feature_vector()
        self.extracted_features = self.extract_all()
        self.sorted_features = sorted(self.extracted_features.items(), key=lambda kv: kv[0])

    def extract_all(self) :
        extracted_features = dict()
        for idx, target in enumerate(self.config.target_filepath_list) :
            print_progress_bar([idx],\
                    [len(self.config.target_filepath_list)],\
                    20, "extracting feature on progress... %s_%s" % (self.config.label, self.config.feature_name))
            target_feature_vector = self.extract_feature(target)
            extracted_features[target_feature_vector.name] = target_feature_vector
        return extracted_features

    def init_feature_vector(self) :
        if self.config.feature_name == "string" :
            self.feature_vector = StringVector
        elif self.config.feature_name == "api" :
            self.feature_vector = ApiVector
        elif self.config.feature_name == "dll" :
            self.feature_vector = DllVector
        else :
            raise NonExistFeatureException

    def extract_feature(self, target_path) :
        return self.feature_vector(target_path)

    def extract_similarity_vectors(self, compared_extracted_feature) :
        similarity_vectors = dict()
        compared_sorted_features = compared_extracted_feature.sorted_features
        for row, key in enumerate(self.extracted_features.keys()) :
            comparer = self.extracted_features[key]
            similarity_vector = []
            for col, (compared_target_name, compared_vector) in enumerate(compared_sorted_features) :
                print_progress_bar([row, col],\
                        [len(self.extracted_features.keys()), len(compared_sorted_features)],\
                        20, "generating similarity vector on progress...%s_%s" % (self.config.label, self.config.feature_name))
                similarity_vector.append(comparer.get_similarity(compared_vector))
            similarity_vectors[key] = similarity_vector
        self.similarity_vectors = similarity_vectors
        self.save_similarity_graph()
        return similarity_vectors

    def save_similarity_graph(self) :
        for idx, target in enumerate(self.similarity_vectors.keys()) :
            print_progress_bar([idx], [len(self.similarity_vectors.keys())], 20, "extracting graph image on progress... %s_%s" % (self.config.label, self.config.feature_name))
            self.extracted_features[target]._print_current_target()
            file_name = self.config.graph_result_path+target+".png"
            df = pd.DataFrame(self.similarity_vectors[target])
            ax = df.plot(title=("%s similarity graph to malware set" % self.config.feature_name))
            ax.set_ylim([0.0,1.0])
            ax.set_xlabel("malware set compared to\n%s" % target)
            ax.set_ylabel("similarity")
            fig = ax.get_figure()
            fig.savefig(file_name)
            plt.close(fig)
        self.save_similarity_vectors_to_csv()

    def save_similarity_vectors_to_csv(self) :
        file_name = "similarity_vectors_%s_%s.csv" % (self.config.label, self.config.feature_name)
        df = pd.DataFrame(self.similarity_vectors).transpose()
        df.index.name = "file_name"
        print("\rsaving", file_name, "... ", end="")
        df.to_csv(file_name)
        print("complete.", " "*100)



def main() :
    malware_string = FeatureExtraction(TargetConfig("string"))
    malware_api = FeatureExtraction(TargetConfig("api"))
    malware_dll = FeatureExtraction(TargetConfig("dll"))
    benign_string = FeatureExtraction(TargetConfig("string", "../benign/", "benign"))
    benign_api = FeatureExtraction(TargetConfig("api", "../benign/", "benign"))
    benign_dll = FeatureExtraction(TargetConfig("dll", "../benign/", "benign"))
    malware_string.extract_similarity_vectors(malware_string)
    malware_api.extract_similarity_vectors(malware_api)
    malware_dll.extract_similarity_vectors(malware_dll)
    benign_string.extract_similarity_vectors(malware_string)
    benign_api.extract_similarity_vectors(malware_api)
    benign_dll.extract_similarity_vectors(malware_dll)

main()
